function(csp_autogen MODULE_NAME DEST_FILENAME HEADER_NAME_OUTVAR SOURCE_NAME_OUTVAR)
    string( REPLACE "." "\/" MODULE_FILENAME ${MODULE_NAME} )
    string( JOIN "." MODULE_FILENAME ${MODULE_FILENAME} "py" )

    add_custom_target( mkdir_autogen_${MODULE_NAME}
        ALL COMMAND ${CMAKE_COMMAND} -E make_directory
        "${CMAKE_CURRENT_BINARY_DIR}/csp_autogen" )

    # VARARGS done by position
    if(ARGV4)
        set(CSP_AUTOGEN_EXTRA_ARGS "${ARGV4}")
    else()
        set(CSP_AUTOGEN_EXTRA_ARGS "")
    endif()

    cmake_path(SET CSP_AUTOGEN_PYTHON_EXECUTABLE NORMALIZE ${Python_EXECUTABLE})
    cmake_path(SET CSP_AUTOGEN_CMAKE_COMMAND NORMALIZE ${CMAKE_COMMAND})
    cmake_path(SET CSP_AUTOGEN_PROJECT_BINARY_DIR NORMALIZE ${PROJECT_BINARY_DIR})
    cmake_path(SET CSP_AUTOGEN_CMAKE_SOURCE_DIR NORMALIZE ${CMAKE_SOURCE_DIR})
    cmake_path(SET CSP_AUTOGEN_MODULE_PATH NORMALIZE "${CMAKE_SOURCE_DIR}/csp/build/csp_autogen.py")
    cmake_path(SET CSP_AUTOGEN_DESTINATION_FOLDER NORMALIZE "${CMAKE_CURRENT_BINARY_DIR}/csp_autogen")
    cmake_path(SET CSP_AUTOTGEN_CPP_OUT NORMALIZE "${CMAKE_CURRENT_BINARY_DIR}/csp_autogen/${DEST_FILENAME}.cpp")
    cmake_path(SET CSP_AUTOTGEN_H_OUT NORMALIZE "${CMAKE_CURRENT_BINARY_DIR}/csp_autogen/${DEST_FILENAME}.h")

    cmake_path(SET CSP_AUTOGEN_LIB_DIR NORMALIZE ${CSP_AUTOGEN_PROJECT_BINARY_DIR}/lib)
    cmake_path(SET CSP_AUTOGEN_SOURCE_DIR NORMALIZE ${CSP_AUTOGEN_CMAKE_SOURCE_DIR})

    if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
        set(CSP_AUTOGEN_PYTHONPATH "${CSP_AUTOGEN_LIB_DIR}$<SEMICOLON>${CSP_AUTOGEN_SOURCE_DIR}$<SEMICOLON>%PYTHONPATH%")
        set(CSP_AUTOGEN_LDPATH "${CSP_AUTOGEN_LIB_DIR}$<SEMICOLON>%LD_LIBRARY_PATH%")
        set(CSP_AUTOGEN_PATH "${CSP_AUTOGEN_LIB_DIR}$<SEMICOLON>%PATH%")
    else()
        set(CSP_AUTOGEN_PYTHONPATH "${CSP_AUTOGEN_LIB_DIR}:${CSP_AUTOGEN_SOURCE_DIR}:$PYTHONPATH")
        set(CSP_AUTOGEN_LDPATH "${CSP_AUTOGEN_LIB_DIR}:$LD_LIBRARY_PATH")
        set(CSP_AUTOGEN_PATH "${CSP_AUTOGEN_LIB_DIR}:$PATH")
    endif()

    # This is the command that will be run
    # if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
    #     separate_arguments(CSP_AUTOGEN_ARGS WINDOWS_COMMAND "${CSP_AUTOGEN_ARGS}")
    # endif()

    add_custom_command(OUTPUT "${CSP_AUTOTGEN_CPP_OUT}" "${CSP_AUTOTGEN_H_OUT}"
        COMMAND ${CSP_AUTOGEN_CMAKE_COMMAND} -E env PYTHONPATH=${CSP_AUTOGEN_PYTHONPATH} LD_LIBRARY_PATH=${CSP_AUTOGEN_LDPATH} PATH=${CSP_AUTOGEN_PATH} ${CSP_AUTOGEN_PYTHON_EXECUTABLE} ${CSP_AUTOGEN_MODULE_PATH} -m ${MODULE_NAME} -d ${CSP_AUTOGEN_DESTINATION_FOLDER} -o ${DEST_FILENAME} ${CSP_AUTOGEN_EXTRA_ARGS}
        VERBATIM
        COMMENT "generating csp c++ types from module ${MODULE_NAME}"
        DEPENDS mkdir_autogen_${MODULE_NAME} ${CMAKE_SOURCE_DIR}/${MODULE_FILENAME} csptypesimpl
    )

    set(${SOURCE_NAME_OUTVAR} "${CMAKE_CURRENT_BINARY_DIR}/csp_autogen/${DEST_FILENAME}.cpp" PARENT_SCOPE )
    set(${HEADER_NAME_OUTVAR} "${CMAKE_CURRENT_BINARY_DIR}/csp_autogen/${DEST_FILENAME}.h" PARENT_SCOPE )
endfunction()
