"""
Implementation of numba extensions and few wrappers to work with csp
"""
import numba


@numba.extending.intrinsic
def csp_unsafe_cast_int_to_class_ptr(typingctx, src, dst):
    """Numba extension function that allows casting from int64 (pointer) to class reference

    Provides an LLVM implementation of the casting operation. Can be used in any jit function.
    The int pointer is assumed to be generated by csp_unsafe_cast_class_ptr_to_int.
    Example usage:
        @numba.jitclass([("val", numba.types.unicode_type)])
        class MyClass:
            def __init__(self, val):
                self.val = val

            def get_ptr(self):
                return csp_unsafe_cast_class_ptr_to_int(self)

            def print_hello(self):
                print("Hello my val is ", self.val, ", my address is:", self.get_ptr())


        @numba.njit
        def print_from_ptr(ptr):
            print("Ptr is ", ptr)
            my_o: MyClass = csp_unsafe_cast_int_to_class_ptr(ptr, MyClass)
            my_o.print_hello()


        o = MyClass("Value1")
        o2 = MyClass("Value2")

        print_from_ptr(o.get_ptr())
        print_from_ptr(o2.get_ptr())
    :param typingctx:
    :param src:
    :param dst:
    :return:
    """

    def _csp_unsafe_cast_int_to_class_ptr(int_type, class_type):
        inst_type = class_type.instance_type
        sig = inst_type(numba.types.voidptr, class_type)

        def codegen(context, builder, signature, args):
            ptr, _ = args
            alloc_type = context.get_data_type(inst_type.get_data_type())
            inst_struct = context.make_helper(builder, inst_type)
            inst_struct.meminfo = numba.cgutils.get_null_value(inst_struct.meminfo.type)
            inst_struct.data = builder.bitcast(ptr, alloc_type.as_pointer())
            return inst_struct._getvalue()

        return sig, codegen

    if isinstance(src, numba.types.Integer) and isinstance(dst, numba.types.ClassType):
        return _csp_unsafe_cast_int_to_class_ptr(src, dst)
    return TypeError


@numba.extending.intrinsic
def csp_unsafe_cast_class_ptr_to_int(typingctx, src):
    """Numba extension function that allows casting from class reference to int64 (ptr)
    The returned pointer only valid usage is to store it and then convert back using csp_unsafe_cast_int_to_class_ptr
    For usage example, see documentation of csp_unsafe_cast_int_to_class_ptr

    :param typingctx:
    :param src:
    """

    def _csp_unsafe_cast_class_ptr_to_int(inst_type):
        sig = numba.types.int64(inst_type)

        def codegen(context, builder, signature, args):
            [src] = args
            llrtype = context.get_value_type(numba.int64)
            inst_struct = context.make_helper(builder, inst_type, src)
            return builder.ptrtoint(inst_struct.data, llrtype)

        return sig, codegen

    if isinstance(src, numba.types.ClassInstanceType):
        return _csp_unsafe_cast_class_ptr_to_int(src)
    return TypeError


@numba.jit
def csp_print(*args):
    """
    A wrapper around the print function, there is some bug when trying to print directly from some numba funcitons,
    this wrapper seems to fix this problem
    :param args: Values to print
    """
    print(*args)
